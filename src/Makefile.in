TEST_CONFIGS = -c config/pgmanage.conf -d config/pgmanage-connections-test.conf -n true -t 300
TEST_WEBROOTS = -r ./web_root
PREFIX = @prefix@
WEBROOT = @webroot@
INSTALL_DEPS = $(PREFIX)/sbin/ \
	$(PREFIX)/etc/pgmanage/ \
	$(PREFIX)/etc/pgmanage/pgmanage.conf \
	$(PREFIX)/etc/pgmanage/pgmanage-connections.conf
SOCK_DIR_PARAMETER = @sock_dir_parameter@

VERSION = \"$(shell cat ../VERSION)\"
CC = cc
CFLAGS = -O3 -g \
	-fno-strict-aliasing
LDFLAGS = @LDFLAGS@
CPPFLAGS = @CPPFLAGS@ \
	-I../db_framework_pq \
	-I../ \
	-I. \
	-I../dependencies/tre/include \
	-I../dependencies/libev \
	-DVERSION=$(VERSION) -DPGMANAGE_PREFIX=\"$(PREFIX)\"
V=0

common_SOURCES = $(filter-out util_getopt.c, $(filter-out util_strptime.c, $(wildcard *.c)))
db_framework_pq_SOURCES = $(wildcard ../db_framework_pq/*.c)

pgmanage_SOURCES = $(sort $(common_SOURCES) $(db_framework_pq_SOURCES))
pgmanage_OBJECTS = $(pgmanage_SOURCES:.c=.o)

libev_SOURCES = ../dependencies/libev/ev.c
libev_OBJECTS = $(libev_SOURCES:.c=.o)

.PHONY: all all-format destroy check

# this needs to be at the top to be the default target
all: pgmanage
	@echo
	@echo "Compilation Successful"

#### DEPENDENCIES
$(libev_OBJECTS): %.o: %.c
ifeq ($(V), 1)
	$(CC) $(CFLAGS) $(CPPFLAGS) @libev_CPPFLAGS@ $< -c -o $@
else
	@echo " CC $@"
	@$(CC) $(CFLAGS) $(CPPFLAGS) @libev_CPPFLAGS@ $< -c -o $@
endif

#### BUILDING
pgmanage: $(libev_OBJECTS) $(pgmanage_OBJECTS)
ifeq ($(V), 1)
	$(CC) $(libev_OBJECTS) $(pgmanage_OBJECTS) $(LDFLAGS) $(CFLAGS) -o ./pgmanage
else
	@echo " CCLD pgmanage"
	@$(CC) $(libev_OBJECTS) $(pgmanage_OBJECTS) $(LDFLAGS) $(CFLAGS) -o ./pgmanage
endif

all-format:
	cd ..; ./cleanup_format.sh; cd pgmanage
	$(MAKE) all

$(pgmanage_OBJECTS): %.o: %.c
ifeq ($(V), 1)
	$(CC) $(CFLAGS) $(CPPFLAGS) -Wall -Wextra -Wconversion $< -c -o $@
else
	@echo " CC $@"
	@$(CC) $(CFLAGS) $(CPPFLAGS) -Wall -Wextra -Wconversion $< -c -o $@
endif

#### CLEAN
clean:
	rm -f $(pgmanage_OBJECTS) $(libev_OBJECTS) ../check/*.o pgmanage
	@echo
	@echo "Clean Successful"

#### INSTALL
$(PREFIX)/sbin/:
	mkdir -p $(PREFIX)/sbin/

$(PREFIX)/etc/pgmanage/:
	mkdir -p $(PREFIX)/etc/pgmanage/

$(PREFIX)/etc/pgmanage/pgmanage.conf: $(PREFIX)/etc/pgmanage/ config/pgmanage.conf
	test -f $(PREFIX)/etc/pgmanage/pgmanage.conf || install config/pgmanage.conf $(PREFIX)/etc/pgmanage/pgmanage.conf;

$(PREFIX)/etc/pgmanage/pgmanage-connections.conf: $(PREFIX)/etc/pgmanage/ config/pgmanage-connections.conf
	test -f $(PREFIX)/etc/pgmanage/pgmanage-connections.conf || install config/pgmanage-connections.conf $(PREFIX)/etc/pgmanage/pgmanage-connections.conf;

install: $(INSTALL_DEPS)
	mkdir -p $(WEBROOT)/pgmanage $(PREFIX)/sbin $(PREFIX)/@MANDIR@/man1
	cp -rf ./web_root/pgmanage/* $(WEBROOT)/pgmanage/
	install config/pgmanage.conf $(PREFIX)/etc/pgmanage/pgmanage.conf.example
	install config/pgmanage-connections.conf $(PREFIX)/etc/pgmanage/pgmanage-connections.conf.example
	install pgmanage $(PREFIX)/sbin/
	install man/man1/pgmanage.1 $(PREFIX)/@MANDIR@/man1/pgmanage.1
	@echo
	@echo "Installation Successful"

uninstall:
	rm $(PREFIX)/sbin/pgmanage
	rm -rf $(WEBROOT)/
	rm -rf $(PREFIX)/etc/pgmanage/*.example
	@echo
	@echo "Uninstall Successful"

destroy:
	rm $(PREFIX)/sbin/pgmanage
	rm -rf $(PREFIX)/etc/pgmanage
	@echo
	@echo "Destroy Successful"
	@echo "NOTE: Even though all configuration files have been destroyed, your sql files have been preserved. They should be in you home folder under .pgmanage"


#### TESTING
check_SOURCES = $(filter-out ../util/util_getopt.c, $(filter-out ../util/util_strptime.c, $(filter-out ../util/util_exec.c, $(wildcard ../util/*.c)))) $(db_framework_pq_SOURCES) $(wildcard ../check/*.c)
check_OBJECTS = $(check_SOURCES:.c=.o)

check: $(check_OBJECTS)
	$(CC) $(check_OBJECTS) $(LDFLAGS) $(CFLAGS) -o ./check
	./check

check-valgrind: $(check_OBJECTS)
	$(CC) $(check_OBJECTS) $(LDFLAGS) $(CFLAGS) -o ./check
	valgrind --leak-check=full --track-fds=yes --track-origins=yes --show-reachable=yes --suppressions=../valgrind/mac_suppressions.txt --num-callers=100 ./check

test-common:
	-kill `cat postgres.pid`
	-rm postgres.pid
	-rm -rf data_test
	initdb -D data_test -E UTF8 -U postgres
	echo $(SOCK_DIR_PARAMETER)"='/tmp'" >> data_test/postgresql.conf
	{ postgres -D data_test -p 5431 2> output.txt > output.txt & }; \
	echo $$! > postgres.pid; \
	sleep 3
	psql -U postgres -h 127.0.0.1 -p 5431 postgres -f test.sql
	kill `cat postgres.pid`; rm postgres.pid; sleep 3
	cp data_test/pg_hba.conf data_test/pg_hba.bak
	sed -e '/trust/s/32            trust/32            md5/g' < data_test/pg_hba.bak > data_test/pg_hba.conf
	echo "host    all             all             192.168.0.0/16            md5" >> data_test/pg_hba.conf
	{ postgres -D data_test -i -p 5431 2> output.txt > output.txt & }; \
	echo $$! > postgres.pid; \
	sleep 3

test: test-common
	./pgmanage $(TEST_CONFIGS) $(TEST_WEBROOTS) -d config/pgmanage-connections-test.conf -l info || \
	{ kill `cat postgres.pid`; rm postgres.pid; rm -rf data_test; exit 1; }

test-ssl: test-common
	./pgmanage $(TEST_CONFIGS) $(TEST_WEBROOTS) -d config/pgmanage-connections-test.conf -j ../ssl/self.crt -k ../ssl/self.key -l info || \
	{ kill `cat postgres.pid`; rm postgres.pid; rm -rf data_test; exit 1; }

gdb: test-common
	echo "run" > temp_gdb_commands
	gdb -x temp_gdb_commands --args ./pgmanage $(TEST_CONFIGS) $(TEST_WEBROOTS) -d config/pgmanage-connections-test.conf -l info || \
	{ kill `cat postgres.pid`; rm postgres.pid; rm -rf data_test; exit 1; }
	rm temp_gdb_commands

gdb-ssl: test-common
	echo "run" > temp_gdb_commands
	gdb -x temp_gdb_commands --args ./pgmanage $(TEST_CONFIGS) $(TEST_WEBROOTS) -d config/pgmanage-connections-test.conf -j ../ssl/self.crt -k ../ssl/self.key -l info || \
	{ kill `cat postgres.pid`; rm postgres.pid; rm -rf data_test; exit 1; }
	rm temp_gdb_commands

lldb: test-common
	echo "run" > temp_lldb_commands
	lldb -s temp_lldb_commands -- ./pgmanage $(TEST_CONFIGS) $(TEST_WEBROOTS) -d config/pgmanage-connections-test.conf -l info || \
	{ kill `cat postgres.pid`; rm postgres.pid; rm -rf data_test; exit 1; }
	rm temp_lldb_commands

lldb-ssl: test-common
	echo "run" > temp_lldb_commands
	lldb -s temp_lldb_commands -- ./pgmanage $(TEST_CONFIGS) $(TEST_WEBROOTS) -d config/pgmanage-connections-test.conf -j ../ssl/self.crt -k ../ssl/self.key -l info || \
	{ kill `cat postgres.pid`; rm postgres.pid; rm -rf data_test; exit 1; }
	rm temp_lldb_commands

valgrind: test-common
	valgrind --leak-check=full --track-fds=yes --track-origins=yes --show-reachable=yes --suppressions=../valgrind/mac_suppressions.txt --num-callers=100 ./pgmanage $(TEST_CONFIGS) $(TEST_WEBROOTS) -d config/pgmanage-connections-test.conf -l none || \
	{ kill `cat postgres.pid`; rm postgres.pid; rm -rf data_test; exit 1; }

valgrind-ssl: test-common
	valgrind --leak-check=full --track-fds=yes --track-origins=yes --show-reachable=yes --suppressions=../valgrind/mac_suppressions.txt --num-callers=100 ./pgmanage $(TEST_CONFIGS) $(TEST_WEBROOTS) -d config/pgmanage-connections-test.conf -j ../ssl/self.crt -k ../ssl/self.key -l none || \
	{ kill `cat postgres.pid`; rm postgres.pid; rm -rf data_test; exit 1; }
